# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: ssh-qrapp-websocket
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

useDotenv: true

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  websocketsApiName: ssh-qrapp-websocket
  websocketsApiRouteSelectionExpression: $request.body.action
  region: ap-south-1
  
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - "dynamodb:query"
            - "dynamodb:GetItem"
            - "dynamodb:PutItem"
          Resource:
            - Fn::GetAtt: [ SSHAuthDB, Arn ]
  
  environment:
    REGION: ${env:REGION}
    DYNAMODB_TABLE: SSHAuthDB
    WEBSOCKET_ENDPOINT: ${env:WEBSOCKET_ENDPOINT}
    NODE_ENV: ${env:NODE_ENV}


# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

package:
  patterns:
    - '!node_modules/**'
    - handler.js
    - '!package.json'
    - '!package-lock.json'



plugins:
  - serverless-dotenv-plugin

layers:
  sshQRAPPLibs:
    path: layer
    compatibleRuntimes:
      - nodejs12.x

functions:
  connectionHandler:
    handler: handler.connectHandler
    timeout: 60
    memorySize: 256
    layers:
      - {Ref: SshQRAPPLibsLambdaLayer}
    events:
      - websocket:
         route: $connect
         routeResponseSelectionExpression: $default
  disconnectHandler:
    handler: handler.disconnectHandler
    memorySize: 256
    timeout: 60
    layers:
      - {Ref: SshQRAPPLibsLambdaLayer}
    events:
      - websocket: $disconnect
  defaultHandler:
    handler: handler.defaultHandler
    memorySize: 256
    timeout: 60
    layers:
      - {Ref: SshQRAPPLibsLambdaLayer}
    events:
      - websocket: $default
  customQueryHandler:
    handler: handler.queryHandler
    memorySize: 256
    timeout: 60
    layers:
      - {Ref: SshQRAPPLibsLambdaLayer}
    events:
      - websocket:
         route: expectauth
         routeResponseSelectionExpression: $default
      - websocket:
         route: getconid
         routeResponseSelectionExpression: $default
      - websocket:
         route: verifyauth
         routeResponseSelectionExpression: $default
  

#functions:
#  hello:
#    handler: handler.hello
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

resources:
  Resources:
    SSHAuthDB:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:DYNAMODB_TABLE}
        AttributeDefinitions:
          - AttributeName: authkey
            AttributeType: S
        KeySchema:
          - AttributeName: authkey
            KeyType: HASH
        TimeToLiveSpecification:
          AttributeName: expires_at
          Enabled: true
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
